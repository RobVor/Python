#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Dec 05, 2017 06:44:56 PM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import AppForm_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.resizeable(0,0)
    top = LibMe_Book_Application (root)
    AppForm_support.init(root, top)
    root.mainloop()

w = None
def create_LibMe_Book_Application(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = LibMe_Book_Application (w)
    AppForm_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_LibMe_Book_Application():
    global w
    w.destroy()
    w = None


class LibMe_Book_Application:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("480x265+704+337")
        top.title("LibMe Book Application")
        top.configure(background="#d9d9d9")



        self.lblTitle = Label(top)
        self.lblTitle.place(relx=-0.01, rely=0.04, height=21, width=64)
        self.lblTitle.configure(background="#d9d9d9")
        self.lblTitle.configure(disabledforeground="#a3a3a3")
        self.lblTitle.configure(foreground="#000000")
        self.lblTitle.configure(text='''Title:''')
        self.lblTitle.configure(width=64)

        self.Label2 = Label(top)
        self.Label2.place(relx=-0.01, rely=0.15, height=21, width=64)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Year:''')
        self.Label2.configure(width=64)

        self.txtTitle = Entry(top)
        self.txtTitle.place(relx=0.14, rely=0.04, relheight=0.08, relwidth=0.34)
        self.txtTitle.configure(background="white")
        self.txtTitle.configure(disabledforeground="#a3a3a3")
        self.txtTitle.configure(font="TkFixedFont")
        self.txtTitle.configure(foreground="#000000")
        self.txtTitle.configure(insertbackground="black")

        self.txtYear = Entry(top)
        self.txtYear.place(relx=0.14, rely=0.15, relheight=0.08, relwidth=0.34)
        self.txtYear.configure(background="white")
        self.txtYear.configure(disabledforeground="#a3a3a3")
        self.txtYear.configure(font="TkFixedFont")
        self.txtYear.configure(foreground="#000000")
        self.txtYear.configure(insertbackground="black")

        self.lblAuthor = Label(top)
        self.lblAuthor.place(relx=0.49, rely=0.04, height=21, width=64)
        self.lblAuthor.configure(background="#d9d9d9")
        self.lblAuthor.configure(disabledforeground="#a3a3a3")
        self.lblAuthor.configure(foreground="#000000")
        self.lblAuthor.configure(text='''Author:''')

        self.lblISBN = Label(top)
        self.lblISBN.place(relx=0.49, rely=0.15, height=21, width=64)
        self.lblISBN.configure(background="#d9d9d9")
        self.lblISBN.configure(disabledforeground="#a3a3a3")
        self.lblISBN.configure(foreground="#000000")
        self.lblISBN.configure(text='''ISBN:''')

        self.txtAuthor = Entry(top)
        self.txtAuthor.place(relx=0.64, rely=0.04, relheight=0.08, relwidth=0.34)

        self.txtAuthor.configure(background="white")
        self.txtAuthor.configure(disabledforeground="#a3a3a3")
        self.txtAuthor.configure(font="TkFixedFont")
        self.txtAuthor.configure(foreground="#000000")
        self.txtAuthor.configure(insertbackground="black")

        self.txtISBN = Entry(top)
        self.txtISBN.place(relx=0.64, rely=0.15, relheight=0.08, relwidth=0.34)
        self.txtISBN.configure(background="white")
        self.txtISBN.configure(disabledforeground="#a3a3a3")
        self.txtISBN.configure(font="TkFixedFont")
        self.txtISBN.configure(foreground="#000000")
        self.txtISBN.configure(insertbackground="black")

        self.lstAllRecords = ScrolledListBox(top)
        self.lstAllRecords.place(relx=0.02, rely=0.26, relheight=0.7
                , relwidth=0.73)
        self.lstAllRecords.configure(background="white")
        self.lstAllRecords.configure(disabledforeground="#a3a3a3")
        self.lstAllRecords.configure(font="TkFixedFont")
        self.lstAllRecords.configure(foreground="black")
        self.lstAllRecords.configure(highlightbackground="#d9d9d9")
        self.lstAllRecords.configure(highlightcolor="#d9d9d9")
        self.lstAllRecords.configure(selectbackground="#c4c4c4")
        self.lstAllRecords.configure(selectforeground="black")
        self.lstAllRecords.configure(width=10)

        self.btnViewAll = Button(top)
        self.btnViewAll.place(relx=0.78, rely=0.3, height=24, width=90)
        self.btnViewAll.configure(activebackground="#d9d9d9")
        self.btnViewAll.configure(activeforeground="#000000")
        self.btnViewAll.configure(background="#d9d9d9")
        self.btnViewAll.configure(disabledforeground="#a3a3a3")
        self.btnViewAll.configure(foreground="#000000")
        self.btnViewAll.configure(highlightbackground="#d9d9d9")
        self.btnViewAll.configure(highlightcolor="black")
        self.btnViewAll.configure(pady="0")
        self.btnViewAll.configure(text='''View All''')
        self.btnViewAll.configure(width=73)

        self.btnSearch = Button(top)
        self.btnSearch.place(relx=0.78, rely=0.42, height=24, width=90)
        self.btnSearch.configure(activebackground="#d9d9d9")
        self.btnSearch.configure(activeforeground="#000000")
        self.btnSearch.configure(background="#d9d9d9")
        self.btnSearch.configure(disabledforeground="#a3a3a3")
        self.btnSearch.configure(foreground="#000000")
        self.btnSearch.configure(highlightbackground="#d9d9d9")
        self.btnSearch.configure(highlightcolor="black")
        self.btnSearch.configure(pady="0")
        self.btnSearch.configure(text='''Search''')
        self.btnSearch.configure(width=66)

        self.btnAdd = Button(top)
        self.btnAdd.place(relx=0.78, rely=0.53, height=24, width=90)
        self.btnAdd.configure(activebackground="#d9d9d9")
        self.btnAdd.configure(activeforeground="#000000")
        self.btnAdd.configure(background="#d9d9d9")
        self.btnAdd.configure(disabledforeground="#a3a3a3")
        self.btnAdd.configure(foreground="#000000")
        self.btnAdd.configure(highlightbackground="#d9d9d9")
        self.btnAdd.configure(highlightcolor="black")
        self.btnAdd.configure(pady="0")
        self.btnAdd.configure(text='''Add Record''')
        self.btnAdd.configure(width=85)

        self.btnUpdate = Button(top)
        self.btnUpdate.place(relx=0.78, rely=0.64, height=24, width=90)
        self.btnUpdate.configure(activebackground="#d9d9d9")
        self.btnUpdate.configure(activeforeground="#000000")
        self.btnUpdate.configure(background="#d9d9d9")
        self.btnUpdate.configure(disabledforeground="#a3a3a3")
        self.btnUpdate.configure(foreground="#000000")
        self.btnUpdate.configure(highlightbackground="#d9d9d9")
        self.btnUpdate.configure(highlightcolor="black")
        self.btnUpdate.configure(pady="0")
        self.btnUpdate.configure(text='''Update Record''')

        self.btnDelete = Button(top)
        self.btnDelete.place(relx=0.78, rely=0.75, height=24, width=90)
        self.btnDelete.configure(activebackground="#d9d9d9")
        self.btnDelete.configure(activeforeground="#000000")
        self.btnDelete.configure(background="#d9d9d9")
        self.btnDelete.configure(disabledforeground="#a3a3a3")
        self.btnDelete.configure(foreground="#000000")
        self.btnDelete.configure(highlightbackground="#d9d9d9")
        self.btnDelete.configure(highlightcolor="black")
        self.btnDelete.configure(pady="0")
        self.btnDelete.configure(text='''Delete Record''')

        self.btnClose = Button(top)
        self.btnClose.place(relx=0.78, rely=0.87, height=24, width=90)
        self.btnClose.configure(activebackground="#d9d9d9")
        self.btnClose.configure(activeforeground="#000000")
        self.btnClose.configure(background="#d9d9d9")
        self.btnClose.configure(disabledforeground="#a3a3a3")
        self.btnClose.configure(foreground="#000000")
        self.btnClose.configure(highlightbackground="#d9d9d9")
        self.btnClose.configure(highlightcolor="black")
        self.btnClose.configure(pady="0")
        self.btnClose.configure(text='''Close''')

        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)







# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



